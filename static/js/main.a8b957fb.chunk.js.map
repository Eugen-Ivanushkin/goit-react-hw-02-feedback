{"version":3,"sources":["components/statistics/statistics.tsx","components/feedback-options/feedback-options.tsx","components/section/section.tsx","components/notification/notification.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Statistics","props","good","neutral","bad","total","positiveFidback","positivePercentage","FeedbackOptions","incGood","incNeutral","incBad","onClick","Section","this","title","children","Component","Notification","message","App","state","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","positiveFeedback","Math","round","isNaN","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QA2BeA,EAjBqB,SAACC,GACjC,IAAQC,EAAkDD,EAAlDC,KAAMC,EAA4CF,EAA5CE,QAASC,EAAmCH,EAAnCG,IAAKC,EAA8BJ,EAA9BI,MAClBC,GAAkBC,EAD8BN,EAAvBM,sBAGnC,OACI,8BACE,+BACE,wCAAYL,KACZ,2CAAeC,KACf,uCAAUC,KACV,yCAAaC,KACb,qDAAwBC,EAAxB,cCAGE,EAb0B,SAACP,GACtC,IAAOQ,EAA+BR,EAA/BQ,QAASC,EAAsBT,EAAtBS,WAAYC,EAAUV,EAAVU,OAG5B,OACI,gCACE,wBAAQC,QAASH,EAAjB,kBACA,wBAAQG,QAASF,EAAjB,qBACA,wBAAQE,QAASD,EAAjB,qBCGKE,E,4JAXX,WACI,MAA2BC,KAAKb,MAAzBc,EAAP,EAAOA,MAAOC,EAAd,EAAcA,SACd,OACA,qCACI,6BAAKD,IACJC,S,GAPSC,aCQPC,EARsB,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpC,OACI,mCACI,6BAAMA,OCsFHC,G,kNAzEbC,MAAQ,CACNnB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPK,QAAU,WACR,EAAKa,UAAS,SAAAC,GACZ,MAAO,CACLrB,KAAMqB,EAAUrB,KAAO,O,EAK7BQ,WAAa,WACX,EAAKY,UAAS,SAAAC,GACZ,MAAO,CACLpB,QAASoB,EAAUpB,QAAU,O,EAKnCQ,OAAS,WACP,EAAKW,UAAS,SAAAC,GACZ,MAAO,CACLnB,IAAKmB,EAAUnB,IAAM,O,EAK3BoB,mBAAqB,WACnB,OAAO,EAAKH,MAAMnB,KAAO,EAAKmB,MAAMlB,QAAU,EAAKkB,MAAMjB,K,EAG3DqB,gCAAkC,WAChC,IAAIC,EAAmBC,KAAKC,MAAwB,IAAlB,EAAKP,MAAMnB,MAAc,EAAKmB,MAAMnB,KAAO,EAAKmB,MAAMlB,QAAU,EAAKkB,MAAMjB,MAC7G,OAAOyB,MAAMH,GAAmB,EAAIA,G,4CAGtC,WACE,MAA+BZ,KAAKO,MAA5BnB,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACjBC,EAAQS,KAAKU,qBAEnB,OACE,sBAAKM,UAAU,MAAf,UACE,cAAC,EAAD,CAASf,MAAO,wBAAhB,SACA,cAAC,EAAD,CACEN,QAASK,KAAKL,QACdC,WAAYI,KAAKJ,WACjBC,OAAQG,KAAKH,WAIf,cAAC,EAAD,CAASI,MAAO,aAAhB,SAEc,IAATb,GAA0B,IAAZC,GAAyB,IAARC,EAC9B,cAAC,EAAD,CAAce,QAAS,sBAEvB,cAAC,EAAD,CACEjB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPE,mBAAoBO,KAAKW,2C,GAjEvBR,cCNHc,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a8b957fb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ninterface Props {\r\n  good: number,\r\n  neutral: number,\r\n  bad: number,\r\n  total: number,\r\n  positivePercentage: () => number\r\n}\r\n\r\nconst Statistics: React.FC<Props> = (props) => {\r\n    const { good, neutral, bad, total, positivePercentage } = props;\r\n        const positiveFidback = positivePercentage();\r\n    \r\n    return (\r\n        <div>\r\n          <ul>\r\n            <li>Good: { good }</li>\r\n            <li>Neutral: { neutral }</li>\r\n            <li>Bad: {bad}</li>\r\n            <li>Total: { total }</li>\r\n            <li>Positive feedback: {positiveFidback} %</li>\r\n          </ul>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Statistics;\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n    incGood: () => void,\r\n    incNeutral: () => void,\r\n    incBad: () => void,\r\n}\r\n\r\nconst FeedbackOptions: React.FC<Props> = (props) => {\r\n    const {incGood, incNeutral, incBad} = props;\r\n\r\n    \r\n    return (\r\n        <div>\r\n          <button onClick={incGood}>Good</button>\r\n          <button onClick={incNeutral}>Neutral</button>\r\n          <button onClick={incBad}>Bad</button>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import React, { Component } from 'react';\r\n\r\ninterface Props {\r\n    title:string\r\n}\r\n\r\nclass Section extends Component<Props> {\r\n    \r\n    render() {\r\n        const {title, children } = this.props;\r\n        return (\r\n        <>\r\n            <h2>{title}</h2>\r\n            {children}\r\n        </>\r\n    )\r\n    }\r\n};\r\n\r\nexport default Section;\r\n","import React from 'react';\r\n\r\ninterface Props{\r\n    message:string\r\n}\r\n\r\nconst Notification:React.FC<Props> = ({ message }) => {\r\n    return (\r\n        <>\r\n            <h2>{ message }</h2>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Notification;\r\n","import { Component } from 'react';\n\n//components\nimport Statistics from './components/statistics';\nimport FeedbackOptions from './components/feedback-options';\nimport Section from './components/section';\nimport Notification from './components/notification';\n\n//styles\nimport './App.css';\n\ninterface Props { }\n\ninterface State {\n  good: number,\n  neutral: number,\n  bad: number\n }\n\n\nclass App extends Component<Props, State> {\n\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0\n  };\n  \n  incGood = () => {\n    this.setState(prevState => {\n      return {\n        good: prevState.good + 1\n      };\n    });\n  };\n\n  incNeutral = () => {\n    this.setState(prevState => {\n      return {\n        neutral: prevState.neutral + 1\n      };\n    });\n  };\n\n  incBad = () => {\n    this.setState(prevState => {\n      return {\n        bad: prevState.bad + 1\n      };\n    });\n  };\n\n  countTotalFeedback = () => {\n    return this.state.good + this.state.neutral + this.state.bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    let positiveFeedback = Math.round(this.state.good * 100 / (this.state.good + this.state.neutral + this.state.bad));\n    return isNaN(positiveFeedback)? 0 : positiveFeedback\n  };\n  \n  render() {\n    const { good, neutral, bad } = this.state;\n    const total = this.countTotalFeedback();\n    \n    return (\n      <div className=\"App\">\n        <Section title={'Please leave feedback'}>\n        <FeedbackOptions\n          incGood={this.incGood}\n          incNeutral={this.incNeutral}\n          incBad={this.incBad}\n        />\n        </Section>\n\n        <Section title={'Statistics'}>\n          {\n            (good === 0 && neutral === 0 && bad === 0) ?\n              <Notification message={'No feedback given' }/>\n              :\n              <Statistics\n                good={good}\n                neutral={neutral}\n                bad={bad}\n                total={total}\n                positivePercentage={this.countPositiveFeedbackPercentage}\n              />\n          }\n        </Section>\n\n    </div>\n  );\n  };\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}